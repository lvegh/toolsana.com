const sharp=require("sharp"),imagemin=require("imagemin"),imageminPngquant=require("imagemin-pngquant"),imageminOptipng=require("imagemin-optipng"),imageminAdvpng=require("imagemin-advpng"),logger=require("../utils/logger");class PngOptimizer{constructor(){this.compressionStrategies={gradient:{quality:[.85,.95],speed:1,strip:!0,dithering:0,posterize:0},aggressive:{quality:[.65,.85],speed:1,strip:!0,dithering:1,posterize:0},ultraAggressive:{quality:[.5,.75],speed:1,strip:!0,dithering:1,posterize:0},balanced:{quality:[.7,.85],speed:3,strip:!0,dithering:.5,posterize:0}}}async analyzeImage(e){try{const i=await sharp(e).metadata(),t=await sharp(e).stats(),a=t.channels.some((e=>e.stdev<40)),s=t.channels.reduce(((e,i)=>e+(i.stdev||0)),0)/t.channels.length,n={width:i.width,height:i.height,channels:i.channels,hasAlpha:i.hasAlpha,isAnimated:i.pages&&i.pages>1,colorSpace:i.space,density:i.density,size:e.length,hasGradients:a,avgStdDev:s,uniqueColors:this.estimateUniqueColors(t),complexity:this.calculateComplexity(i,t)};return logger.info("PNG image analyzed",n),n}catch(e){throw logger.error("Failed to analyze PNG image",{error:e.message}),e}}estimateUniqueColors(e){if(!e.channels||0===e.channels.length)return 0;const i=e.channels.slice(0,3).reduce(((e,i)=>e+(i.max-i.min)),0)/3;return Math.min(Math.round(100*i),16777216)}calculateComplexity(e,i){let t=0;if(e.hasAlpha&&(t+=20),e.width*e.height>1e6&&(t+=20),i.channels&&i.channels.length>0){const e=i.channels.reduce(((e,i)=>e+(i.stdev||0)),0)/i.channels.length;t+=Math.min(e/2,30)}const a=this.estimateUniqueColors(i);return a>1e4?t+=20:a>1e3&&(t+=10),Math.min(t,100)}selectCompressionStrategy(e){return e.hasGradients?(logger.info("Gradient image detected, using gradient-safe strategy",{avgStdDev:e.avgStdDev}),"gradient"):e.size<1e4?(logger.info("Small image detected, using balanced strategy"),"balanced"):e.complexity<30||e.uniqueColors<256?(logger.info("Simple image detected, using ultra-aggressive strategy",{complexity:e.complexity,uniqueColors:e.uniqueColors}),"ultraAggressive"):e.complexity>70||e.hasAlpha?(logger.info("Complex image detected, using aggressive strategy",{complexity:e.complexity,hasAlpha:e.hasAlpha}),"aggressive"):(logger.info("Standard image detected, using aggressive strategy"),"aggressive")}async stripMetadata(e){try{const i=await sharp(e).withMetadata(!1).toBuffer(),t=e.length-i.length;return t>0&&logger.info("Metadata stripped",{bytesRemoved:t}),i}catch(i){return logger.warn("Failed to strip metadata",{error:i.message}),e}}async compress(e,i={}){const t=Date.now(),a=e.length;try{let i=await this.stripMetadata(e);const s=await this.analyzeImage(i);logger.info("Selected compression strategy based on analysis",{hasGradients:s.hasGradients,complexity:s.complexity,size:s.size});let n=i,r=i.length,g="original";const o=[];if(s.hasGradients){logger.info("Gradient detected - using quality-preserving compression");const e=await imagemin.buffer(i,{plugins:[imageminPngquant({quality:[.9,.98],speed:1,strip:!0,dithering:0,posterize:0})]}).catch((()=>i));let t=await imagemin.buffer(e,{plugins:[imageminOptipng({optimizationLevel:2})]}).catch((()=>e));t=await imagemin.buffer(t,{plugins:[imageminAdvpng({optimizationLevel:4,iterations:20})]}).catch((()=>t)),o.push({strategy:"gradient-safe",size:t.length,buffer:t}),t.length<r&&(n=t,r=t.length,g="gradient-safe")}if(!s.hasGradients){logger.info("Applying TinyPNG-style aggressive compression");const e=[{quality:[.6,.8],dither:1,name:"aggressive-80"},{quality:[.55,.75],dither:1,name:"aggressive-75"},{quality:[.5,.7],dither:1,name:"aggressive-70"},{quality:[.45,.65],dither:1,name:"aggressive-65"},{quality:[.4,.6],dither:1,name:"aggressive-60"}];for(const t of e)try{let e=await imagemin.buffer(i,{plugins:[imageminPngquant({quality:t.quality,speed:1,strip:!0,dithering:t.dither,posterize:0})]});e=await imagemin.buffer(e,{plugins:[imageminOptipng({optimizationLevel:2})]}).catch((()=>e)),e=await imagemin.buffer(e,{plugins:[imageminAdvpng({optimizationLevel:4,iterations:20})]}).catch((()=>e)),o.push({strategy:t.name,size:e.length,buffer:e}),e.length<r&&(n=e,r=e.length,g=t.name,logger.info(`New best: ${t.name} - ${e.length} bytes`))}catch(e){logger.warn(`Failed ${t.name}:`,e.message)}}if(!s.hasGradients&&r>.3*a){logger.info("Trying color quantization strategies");const i=[256,192,128,96,64];for(const t of i)try{let i=await sharp(e).png({palette:!0,quality:90,colors:t,dither:1,compressionLevel:9,adaptiveFiltering:!0,effort:10}).toBuffer();i=await imagemin.buffer(i,{plugins:[imageminPngquant({quality:[.8,.9],speed:1,strip:!0,dithering:.5})]}).catch((()=>i)),i=await imagemin.buffer(i,{plugins:[imageminOptipng({optimizationLevel:2})]}).catch((()=>i)),i=await imagemin.buffer(i,{plugins:[imageminAdvpng({optimizationLevel:4,iterations:15})]}).catch((()=>i)),o.push({strategy:`quantized-${t}`,size:i.length,buffer:i}),i.length<r&&(n=i,r=i.length,g=`quantized-${t}`,logger.info(`New best: quantized-${t} - ${i.length} bytes`))}catch(e){logger.warn(`Quantization ${t} colors failed:`,e.message)}}const l=(a-r)/a*100;if(!s.hasGradients&&l<75&&a>1e5){logger.info("Applying ultra-aggressive final pass (current ratio: "+l.toFixed(1)+"%)");try{let i=await imagemin.buffer(e,{plugins:[imageminPngquant({quality:[.35,.55],speed:1,strip:!0,dithering:1,posterize:0})]});for(let e=0;e<2;e++)i=await imagemin.buffer(i,{plugins:[imageminOptipng({optimizationLevel:2})]}).catch((()=>i)),i=await imagemin.buffer(i,{plugins:[imageminAdvpng({optimizationLevel:4,iterations:25})]}).catch((()=>i));o.push({strategy:"ultra-aggressive",size:i.length,buffer:i}),i.length<r&&(n=i,r=i.length,g="ultra-aggressive",logger.info(`Ultra-aggressive achieved: ${i.length} bytes`))}catch(e){logger.warn("Ultra-aggressive failed:",e.message)}}const m=r,p=((a-m)/a*100).toFixed(1),c=Date.now()-t;return logger.info("All compression attempts:",{attempts:o.map((e=>({strategy:e.strategy,size:e.size,ratio:((a-e.size)/a*100).toFixed(1)+"%"}))).sort(((e,i)=>e.size-i.size))}),logger.info("PNG compression completed",{originalSize:a,finalSize:m,compressionRatio:`${p}%`,strategy:g,processingTime:`${c}ms`,targetWas78Percent:"475 KB",achieved:`${(m/1024).toFixed(2)} KB`}),{buffer:n,originalSize:a,compressedSize:m,compressionRatio:p,strategy:g,analysis:s,allAttempts:o.map((e=>({strategy:e.strategy,size:e.size,ratio:((a-e.size)/a*100).toFixed(1)})))}}catch(i){logger.error("PNG compression failed completely",{error:i.message,stack:i.stack});const t=await sharp(e).png({compressionLevel:9,adaptiveFiltering:!0,palette:!0,quality:70,effort:10,colors:128}).toBuffer();return{buffer:t,originalSize:a,compressedSize:t.length,compressionRatio:((a-t.length)/a*100).toFixed(1),strategy:"fallback-sharp",analysis:null}}}}module.exports=new PngOptimizer;