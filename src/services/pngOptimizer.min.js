const sharp=require("sharp"),imagemin=require("imagemin"),imageminPngquant=require("imagemin-pngquant"),imageminOptipng=require("imagemin-optipng"),imageminAdvpng=require("imagemin-advpng"),logger=require("../utils/logger");class PngOptimizer{constructor(){this.compressionStrategies={gradient:{quality:[.85,.95],speed:1,strip:!0,dithering:0,posterize:0},aggressive:{quality:[.65,.85],speed:1,strip:!0,dithering:1,posterize:0},ultraAggressive:{quality:[.5,.75],speed:1,strip:!0,dithering:1,posterize:0},balanced:{quality:[.7,.85],speed:3,strip:!0,dithering:.5,posterize:0}}}async analyzeImage(e){try{const i=await sharp(e).metadata(),t=await sharp(e).stats(),a=t.channels.some((e=>e.stdev<40)),n=t.channels.reduce(((e,i)=>e+(i.stdev||0)),0)/t.channels.length,g={width:i.width,height:i.height,channels:i.channels,hasAlpha:i.hasAlpha,isAnimated:i.pages&&i.pages>1,colorSpace:i.space,density:i.density,size:e.length,hasGradients:a,avgStdDev:n,uniqueColors:this.estimateUniqueColors(t),complexity:this.calculateComplexity(i,t)};return logger.info("PNG image analyzed",g),g}catch(e){throw logger.error("Failed to analyze PNG image",{error:e.message}),e}}estimateUniqueColors(e){if(!e.channels||0===e.channels.length)return 0;const i=e.channels.slice(0,3).reduce(((e,i)=>e+(i.max-i.min)),0)/3;return Math.min(Math.round(100*i),16777216)}calculateComplexity(e,i){let t=0;if(e.hasAlpha&&(t+=20),e.width*e.height>1e6&&(t+=20),i.channels&&i.channels.length>0){const e=i.channels.reduce(((e,i)=>e+(i.stdev||0)),0)/i.channels.length;t+=Math.min(e/2,30)}const a=this.estimateUniqueColors(i);return a>1e4?t+=20:a>1e3&&(t+=10),Math.min(t,100)}selectCompressionStrategy(e){return e.hasGradients?(logger.info("Gradient image detected, using gradient-safe strategy",{avgStdDev:e.avgStdDev}),"gradient"):e.size<1e4?(logger.info("Small image detected, using balanced strategy"),"balanced"):e.complexity<30||e.uniqueColors<256?(logger.info("Simple image detected, using ultra-aggressive strategy",{complexity:e.complexity,uniqueColors:e.uniqueColors}),"ultraAggressive"):e.complexity>70||e.hasAlpha?(logger.info("Complex image detected, using aggressive strategy",{complexity:e.complexity,hasAlpha:e.hasAlpha}),"aggressive"):(logger.info("Standard image detected, using aggressive strategy"),"aggressive")}async stripMetadata(e){try{const i=await sharp(e).withMetadata(!1).toBuffer(),t=e.length-i.length;return t>0&&logger.info("Metadata stripped",{bytesRemoved:t}),i}catch(i){return logger.warn("Failed to strip metadata",{error:i.message}),e}}async compress(e,i={}){const t=Date.now(),a=e.length;try{logger.info("Starting compression",{originalSize:a});let i=await this.stripMetadata(e);logger.info("After metadata strip",{size:i.length});const n=await this.analyzeImage(i);logger.info("Image analysis complete",{hasGradients:n.hasGradients,complexity:n.complexity,avgStdDev:n.avgStdDev});i.length;if(n.hasGradients){logger.info("Gradient detected - using quality-preserving compression");const e=await imagemin.buffer(i,{plugins:[imageminPngquant({quality:[.9,.98],speed:1,strip:!0,dithering:0})]}).catch((e=>(logger.error("Gradient pngquant failed:",e.message),i)));logger.info("After gradient pngquant",{size:e.length});let t=await imagemin.buffer(e,{plugins:[imageminOptipng({optimizationLevel:2})]}).catch((()=>e));return logger.info("After OptiPNG",{size:t.length}),t=await imagemin.buffer(t,{plugins:[imageminAdvpng({optimizationLevel:4,iterations:20})]}).catch((()=>t)),logger.info("After AdvPNG",{size:t.length}),{buffer:t,originalSize:a,compressedSize:t.length,compressionRatio:((a-t.length)/a*100).toFixed(1),strategy:"gradient-safe",analysis:n}}logger.info("Detailed image - applying AGGRESSIVE compression"),logger.info("TEST 1: quality [0.50, 0.70]");let g=await imagemin.buffer(i,{plugins:[imageminPngquant({quality:[.5,.7],speed:1,strip:!0,dithering:1})]}).catch((e=>(logger.error("Test 1 failed:",e.message),i)));logger.info("Test 1 result:",{size:g.length,ratio:((a-g.length)/a*100).toFixed(1)+"%"}),logger.info("TEST 2: quality [0.45, 0.65]");let r=await imagemin.buffer(i,{plugins:[imageminPngquant({quality:[.45,.65],speed:1,strip:!0,dithering:1})]}).catch((e=>(logger.error("Test 2 failed:",e.message),i)));logger.info("Test 2 result:",{size:r.length,ratio:((a-r.length)/a*100).toFixed(1)+"%"}),logger.info("TEST 3: quality [0.40, 0.60]");let s=await imagemin.buffer(i,{plugins:[imageminPngquant({quality:[.4,.6],speed:1,strip:!0,dithering:1})]}).catch((e=>(logger.error("Test 3 failed:",e.message),i)));logger.info("Test 3 result:",{size:s.length,ratio:((a-s.length)/a*100).toFixed(1)+"%"});let l=g,o="test1-[0.50,0.70]";r.length<l.length&&(l=r,o="test2-[0.45,0.65]"),s.length<l.length&&(l=s,o="test3-[0.40,0.60]"),logger.info("Best pngquant result:",{test:o,size:l.length,ratio:((a-l.length)/a*100).toFixed(1)+"%"}),logger.info("Applying OptiPNG..."),l=await imagemin.buffer(l,{plugins:[imageminOptipng({optimizationLevel:2})]}).catch((e=>(logger.warn("OptiPNG failed:",e.message),l))),logger.info("After OptiPNG:",{size:l.length,ratio:((a-l.length)/a*100).toFixed(1)+"%"}),logger.info("Applying AdvPNG..."),l=await imagemin.buffer(l,{plugins:[imageminAdvpng({optimizationLevel:4,iterations:20})]}).catch((e=>(logger.warn("AdvPNG failed:",e.message),l))),logger.info("After AdvPNG:",{size:l.length,ratio:((a-l.length)/a*100).toFixed(1)+"%"});const m=l.length,p=((a-m)/a*100).toFixed(1),h=Date.now()-t;return logger.info("=== FINAL RESULT ===",{originalSize:(a/1024).toFixed(2)+" KB",finalSize:(m/1024).toFixed(2)+" KB",compressionRatio:`${p}%`,processingTime:`${h}ms`,tinypngTarget:"78% (475 KB)"}),{buffer:l,originalSize:a,compressedSize:m,compressionRatio:p,strategy:o,analysis:n}}catch(i){logger.error("PNG compression failed completely",{error:i.message,stack:i.stack});const t=await sharp(e).png({compressionLevel:9,adaptiveFiltering:!0,palette:!0,quality:60,effort:10,colors:128}).toBuffer();return{buffer:t,originalSize:a,compressedSize:t.length,compressionRatio:((a-t.length)/a*100).toFixed(1),strategy:"fallback-sharp",analysis:null}}}}module.exports=new PngOptimizer;